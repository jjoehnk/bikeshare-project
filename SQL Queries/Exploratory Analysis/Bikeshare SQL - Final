---- Bluebike SQL Mini Project ----

/*

Table of Contents
1.Table Set-Up and Maintenance 
2.Exploratory Analysis Queries
    A. Bluebikes
    B. Fatal Crashes
3.Further Analysis Queries



*/


-- # Table Set-Up and Maintenance


-- View of unioned bluebike tables for multi-year queries
CREATE VIEW bbrides AS

SELECT bike_id, start_time, end_time, start_station_id, end_station_id, user_type, 'pre-covid' as covid_classification
	FROM bluebike2018
UNION ALL
SELECT bike_id, start_time, end_time, start_station_id, end_station_id, user_type, 'pre-covid' as covid_classification
	FROM bluebike2019
UNION ALL
SELECT bike_id, start_time, end_time, start_station_id, end_station_id, user_type,
	CASE
		WHEN start_time < '2020-03-10'::timestamp THEN 'pre_covid'
        ELSE 'post_covid'
	END AS covid_classification
	FROM bluebike2020
UNION ALL
SELECT bike_id, start_time, end_time, start_station_id, end_station_id, user_type, 'post-covid' as covid_classification
	FROM bluebike2021
UNION ALL
SELECT bike_id, start_time, end_time, start_station_id, end_station_id, user_type, 'post-covid' as covid_classification
	FROM bluebike2022
UNION ALL
SELECT bike_id, start_time, end_time, start_station_id, end_station_id, user_type, 'post-covid' as covid_classification
	FROM bluebike2023;


-- View that joins lat/long and old station id information with new station id, total docks, and deployment year

CREATE VIEW ref_station AS
SELECT
	n.station_id new_id,
	o.id id,
	n.name station_name,
	n.district,
	n.deployment_year,
	n.latitude,
	n.longitude
FROM station n
	LEFT JOIN old_station o on o.name = n.name;


-- Creating a geometry column for bluebike stations

ALTER TABLE stations_all
ADD COLUMN geom geometry(point,4326);

UPDATE stations_all
SET geom = ST_SetSRID(ST_MakePoint(longitude,latitude),4326);


-- Creating a geometry column for fatal crash locations
ALTER TABLE crashes
ADD COLUMN geom geometry(point,4326);

UPDATE crashes
SET geom = ST_SetSRID(ST_MakePoint(longitude,latitude),4326);

-- Creating a serial column for import into QGIS 

ALTER TABLE crashes ADD COLUMN incident_ref serial;

ALTER TABLE crashes ALTER COLUMN incident_ref row_number() OVER (ORDER BY dispatch_time) +5093982409302948;
            -- 1000% bad method for creating a unique number to just smash the keyboard to start at an insanely high number... 
            -- but please forgive for the sins of what I did in my own database that I would not replicate elsewhere (other than below in a different query)


-- # Exploratory Queries

-- ## Bluebike Exploration

-- user type breakdown post-covid
SELECT 
	count(bike_id),
	user_type
FROM bluebikerides
WHERE covid_classification ilike 'post-covid'
GROUP BY 2;
	-- 1840066 customers
	-- 5343911 subscribers 


-- ride activity by year/covid era

SELECT 
	date_part('year', start_time) as year,
	covid_classification,
	count(bike_id) as qty_rides
FROM bluebikerides
GROUP BY 1,2
ORDER BY 1,2 DESC

/*
"year"	"covid_classification"	"qty_rides"
2018	"pre-covid"				1,767,806
2019	"pre-covid"				2,522,537
2020	"pre_covid"				313,114
2020	"post_covid"			1,760,334
2021	"post-covid"			2,934,377
2022	"post-covid"			3,757,282
2023	"post-covid"			492,318
*/



-- ## Fatal Crashes Exploration 

-- breakdown by type of crash
SELECT
	mode_type,
	count(mode_type) qty_incidents
FROM crashes
GROUP BY 1;

/*
"mode_type"	"qty_incidents"
"mv"		22141
"ped"		4399
"bike"		2415
*/

-- bike crash by date


SELECT
	date_part('year', dispatch_time) crsh_yr,
	date_part('month', dispatch_time) crsh_mth,
	count(mode_type) qty_incidents
FROM crashes
WHERE mode_type ilike 'bike'
GROUP BY 1,2
ORDER BY 1,2;
	--bike incidents decreasing year-over-year!!

-- # Further Analysis 



-- Query that pulls the quantity of rides for each station_id by year and month, with the corresponding geom

CREATE VIEW rd_ct_date_geom AS -- added as view to connect results with QGIS

SELECT
	row_number() over (ORDER BY ride_yr,ride_mth,starting_geom) +13208207 date_station_id, -- **added unique identifier for each row to import into QGIS
	ride_yr,
	ride_mth,
	starting_geom,
	ride_qty
FROM (
	SELECT 
		date_part('year', start_time) ride_yr,
		date_part('month', start_time) ride_mth,
		starting_geom,
		count(bike_id) ride_qty
	FROM rides_geometry
	GROUP BY 1,2,3
	ORDER BY 1,2) t1
ORDER BY 1;